services:

  frontend:
    image: node:20-alpine
    working_dir: /frontend
    volumes:
      - ./frontend:/frontend
    command: npm run dev:webpack


  postgres:
    image: postgres:16.2
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRESQL_DATABASE}
      POSTGRES_USER: ${POSTGRESQL_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRESQL_PASSWORD}
    healthcheck:
      test: "/usr/bin/pg_isready --dbname=${POSTGRESQL_DATABASE} --username=${POSTGRESQL_USERNAME} || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data

  backend-migrations:
    build:
      context: ./migrations
      dockerfile: Dockerfile
    env_file:
        - .env
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure:3
    volumes:
      - ./migrations:/migrations

  server:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "8080-8081:8080"
    volumes:
      - .:/app
    env_file:
        - .env
    depends_on:
      postgres:
        condition: service_healthy
      backend-migrations:
        condition: service_completed_successfully

  caddy:
    image: caddy:2.7-alpine
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ${PWD}/caddy/Caddyfile.dev:/etc/caddy/Caddyfile

volumes:
  postgres-data:
    name: postgres-data
